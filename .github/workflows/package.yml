name: package_env

on:
  push:
  # TODO: react also on reopening the PR.
  # pull_request:
  workflow_dispatch:

jobs:
  generate_conda_packd_envs:
    name: conda-pack'd env with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    env:
      TZ: America/New_York

    defaults:
      run:
        shell: bash -leo pipefail {0}

    # Map a step output to a job output
    outputs:
      artifacts_dir: ${{ steps.artifact-file-name.outputs.artifacts_dir }}
      artifact_py310: ${{ steps.artifact-file-name.outputs.artifact_py310 }}
      artifact_py311: ${{ steps.artifact-file-name.outputs.artifact_py311 }}
      artifact_py312: ${{ steps.artifact-file-name.outputs.artifact_py312 }}
      conda_pack_env_py310: ${{ steps.artifact-file-name.outputs.conda_pack_env_py310 }}
      conda_pack_env_py311: ${{ steps.artifact-file-name.outputs.conda_pack_env_py311 }}
      conda_pack_env_py312: ${{ steps.artifact-file-name.outputs.conda_pack_env_py312 }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Install Python for YAML CLI tools
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install YAML CLI tools
        run: |
          python3 -m pip install shyaml

      - name: Set env vars
        run: |
          export DATETIME_STRING=$(date +%Y%m%d%H%M%S)
          echo "DATETIME_STRING=${DATETIME_STRING}" >> $GITHUB_ENV

          export PYTHONVER=$(echo ${{ matrix.python-version }} | sed 's/\.//g')
          echo "PYTHONVER=${PYTHONVER}" >> $GITHUB_ENV

          env_name=$(cat configs/config-py${PYTHONVER}.yml | shyaml get-value env_name)
          export CONDA_PACK_ENV_NAME=${env_name}
          echo "CONDA_PACK_ENV_NAME=${CONDA_PACK_ENV_NAME}" >> $GITHUB_ENV

          export ARTIFACTS_DIR="$HOME/artifacts"
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          if [ ! -d "${ARTIFACTS_DIR}" ]; then
              mkdir -v -p "${ARTIFACTS_DIR}"
          fi

          env | sort -u

      - name: Set artifact file name for non-main branch
        if: github.ref != 'refs/heads/main'
        run: |
          export ARTIFACT_FILE_NAME="test-${{ env.CONDA_PACK_ENV_NAME }}-${{ env.DATETIME_STRING }}"
          echo "ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME}" >> $GITHUB_ENV

          export RETENTION_DAYS=14
          echo "RETENTION_DAYS=${RETENTION_DAYS}" >> $GITHUB_ENV

      - name: Set artifact file name for main branch
        if: github.ref == 'refs/heads/main'
        run: |
          export ARTIFACT_FILE_NAME="${{ env.CONDA_PACK_ENV_NAME }}"
          echo "ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME}" >> $GITHUB_ENV

          export RETENTION_DAYS=90
          echo "RETENTION_DAYS=${RETENTION_DAYS}" >> $GITHUB_ENV

      - name: Share artifact file name
        id: artifact-file-name
        run: |
          echo "artifacts_dir=${{ env.ARTIFACTS_DIR }}" >> $GITHUB_OUTPUT
          echo "artifact_py${{ env.PYTHONVER }}=${ARTIFACT_FILE_NAME}" >> $GITHUB_OUTPUT
          echo "conda_pack_env_py${{ env.PYTHONVER }}=${CONDA_PACK_ENV_NAME}" >> $GITHUB_OUTPUT

      # - name: Setup umamba
      #   uses: mamba-org/setup-micromamba@v1
      #   with:
      #     environment-file: envs/env-py${{ env.PYTHONVER }}.yml
      #     log-level: info

      - name: Setup umamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: ${{ env.CONDA_PACK_ENV_NAME }}
          create-args: >-
            python=${{ matrix.python-version }}
          log-level: info

      - name: Check env
        run: |
          # For reference: https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html.
          set -euo pipefail
          conda info
          conda env list
          conda list
          pip list
          conda config --show-sources
          conda config --show
          printenv | sort

      - name: Export of the env .yml file
        run: |
          conda env export -f ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml
          cat ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml

      # https://github.com/actions/upload-artifact
      - name: Upload artifacts for the env .yml file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONDA_PACK_ENV_NAME }}.yml
          path: ${{ env.ARTIFACTS_DIR }}/${{ env.CONDA_PACK_ENV_NAME }}.yml
          retention-days: 90

      - name: Export files
        run: |
          # Per https://conda.github.io/conda-pack/cli.html:
          conda-pack -o ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz --ignore-missing-files --ignore-editable-packages
          openssl sha256 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-sha256sum.txt
          openssl md5 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-md5sum.txt
          chmod -v 664 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}[.-]*

      - name: Checksum files
        run: |
          cat ${ARTIFACTS_DIR}/*sum.txt

      - name: Upload artifacts for the env tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILE_NAME }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: ${{ env.RETENTION_DAYS }}

  test_conda_packd_envs:
    name: Test conda-pack'd env with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: generate_conda_packd_envs
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false
    env:
      TZ: America/New_York

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set env vars
        run: |
          export PYTHONVER=$(echo ${{ matrix.python-version }} | sed 's/\.//g')
          echo "PYTHONVER=${PYTHONVER}" >> $GITHUB_ENV

          env | sort -u

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate_conda_packd_envs.outputs.artifact_py311 }}

      - name: Test the env with the beamline integration test action
        uses: NSLS2/gha-beamline-integration-test@support-local-conda-env
        with:
          conda_env_url: ''
          conda_env_md5: ''
          conda_pack_env_tarball: "${{ needs.generate_conda_packd_envs.outputs.artifacts_dir }}/${{ needs.generate_conda_packd_envs.outputs.conda_pack_env_py311 }}.tar.gz"
          org: "NSLS-II-CSX"
          repo: "profile_collection"
          branch: "main"
          beamline-acronym: "csx"
