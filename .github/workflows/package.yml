name: package_env

on:
  push:
  release:
    types: [published]
  # TODO: react also on reopening the PR.
  # pull_request:
  workflow_dispatch:

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: astral-sh/setup-uv@v6

      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --hook-stage manual --all-files

  generate_conda_packd_envs:
    name: "Generate: py${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    env:
      TZ: America/New_York

    defaults:
      run:
        shell: bash -leo pipefail {0}

    # Map a step output to a job output
    outputs:
      artifacts_dir: ${{ steps.artifact-file-name.outputs.artifacts_dir }}
      artifact_py310: ${{ steps.artifact-file-name.outputs.artifact_py310 }}
      artifact_py311: ${{ steps.artifact-file-name.outputs.artifact_py311 }}
      artifact_py312: ${{ steps.artifact-file-name.outputs.artifact_py312 }}
      conda_pack_env_py310: ${{ steps.artifact-file-name.outputs.conda_pack_env_py310 }}
      conda_pack_env_py311: ${{ steps.artifact-file-name.outputs.conda_pack_env_py311 }}
      conda_pack_env_py312: ${{ steps.artifact-file-name.outputs.conda_pack_env_py312 }}
      checksum_md5_py310: ${{ steps.checksum_md5.outputs.checksum_md5_py310 }}
      checksum_md5_py311: ${{ steps.checksum_md5.outputs.checksum_md5_py311 }}
      checksum_md5_py312: ${{ steps.checksum_md5.outputs.checksum_md5_py312 }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set env vars
        run: |
          export DATETIME_STRING=$(date +%Y%m%d%H%M%S)
          echo "DATETIME_STRING=${DATETIME_STRING}" >> $GITHUB_ENV

          export PYTHONVER=$(echo ${{ matrix.python-version }} | sed 's/\.//g')
          echo "PYTHONVER=${PYTHONVER}" >> $GITHUB_ENV

          export CONDA_PACK_ENV_NAME="${{ github.ref_name }}-py${PYTHONVER}-tiled"
          echo "CONDA_PACK_ENV_NAME=${CONDA_PACK_ENV_NAME}" >> $GITHUB_ENV

          export ARTIFACTS_DIR="$HOME/artifacts"
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          if [ ! -d "${ARTIFACTS_DIR}" ]; then
              mkdir -v -p "${ARTIFACTS_DIR}"
          fi

          env | sort -u

      - name: Set artifact file name for non-release
        if: github.event_name != 'release'
        run: |
          export ARTIFACT_FILE_NAME="${{ env.CONDA_PACK_ENV_NAME }}-${{ env.DATETIME_STRING }}"
          echo "ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME}" >> $GITHUB_ENV

          export RETENTION_DAYS=14
          echo "RETENTION_DAYS=${RETENTION_DAYS}" >> $GITHUB_ENV

      - name: Set artifact file name for release
        if: github.event_name == 'release'
        run: |
          export ARTIFACT_FILE_NAME="${{ env.CONDA_PACK_ENV_NAME }}"
          echo "ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME}" >> $GITHUB_ENV

          export RETENTION_DAYS=90
          echo "RETENTION_DAYS=${RETENTION_DAYS}" >> $GITHUB_ENV

      - name: Share artifact file name
        id: artifact-file-name
        run: |
          echo "artifacts_dir=${{ env.ARTIFACTS_DIR }}" >> $GITHUB_OUTPUT
          echo "artifact_py${{ env.PYTHONVER }}=${ARTIFACT_FILE_NAME}" >> $GITHUB_OUTPUT
          echo "conda_pack_env_py${{ env.PYTHONVER }}=${CONDA_PACK_ENV_NAME}" >> $GITHUB_OUTPUT

      - name: Remove system-wide condarc
        run: |
          sudo rm -f /usr/share/miniconda/.condarc

      - name: Setup umamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: envs/env-py${{ env.PYTHONVER }}.yml
          log-level: info
        env:
          CONDA_OVERRIDE_GLIBC: "2.28"

      # # For testing only:
      # - name: Setup umamba
      #   uses: mamba-org/setup-micromamba@v1
      #   with:
      #     environment-name: ${{ env.CONDA_PACK_ENV_NAME }}
      #     create-args: >-
      #       python=${{ matrix.python-version }}
      #       conda-pack
      #     log-level: info

      - name: Check env
        run: |
          # For reference: https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html.
          conda info
          conda env list
          conda list
          pip list
          conda config --show-sources
          conda config --show
          printenv | sort

      - name: Check conda configs
        run: |
          # For reference: https://docs.conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html
          cat /home/runner/.condarc || echo "No /home/runner/.condarc file"
          cat /usr/share/miniconda/.condarc || echo "No /usr/share/miniconda/.condarc file"
          cat /home/runner/work/_temp/setup-micromamba/.condarc || echo "No /home/runner/work/_temp/setup-micromamba/.condarc file"

      - name: Export of the env .yml file
        run: |
          conda env export -f ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml
          cat ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.yml

      # https://github.com/actions/upload-artifact
      - name: Upload artifacts for the env .yml file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONDA_PACK_ENV_NAME }}-yml
          path: ${{ env.ARTIFACTS_DIR }}/${{ env.CONDA_PACK_ENV_NAME }}.yml
          retention-days: 90

      - name: Export files
        run: |
          # Per https://conda.github.io/conda-pack/cli.html:
          conda-pack -o ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz --ignore-missing-files --ignore-editable-packages
          openssl sha256 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-sha256sum.txt
          openssl md5 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}.tar.gz > ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-md5sum.txt
          chmod -v 664 ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}[.-]*

      - name: Run import tests
        run: |
          python import-tests.py --python-version=${{ matrix.python-version }}

      - name: Checksum files
        run: |
          cat ${ARTIFACTS_DIR}/*sum.txt

      - name: Share checksum with the output
        id: checksum_md5
        run: |
          echo "checksum_md5_py${{ env.PYTHONVER }}=$(cat ${ARTIFACTS_DIR}/${CONDA_PACK_ENV_NAME}-md5sum.txt | sed 's/.*= //')" >> $GITHUB_OUTPUT

      - name: Upload artifacts for the env tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILE_NAME }}
          path: ${{ env.ARTIFACTS_DIR }}
          retention-days: ${{ env.RETENTION_DAYS }}

  test_conda_packd_envs:
    name: "Test: py${{ matrix.python-version }} / ${{ matrix.repos.beamline-acronym }} / ${{ matrix.repos.branch }}"
    runs-on: ubuntu-latest
    needs: generate_conda_packd_envs
    strategy:
      matrix:
        repos:
          - org: "NSLS2"
            repo: "csx-profile-collection"
            branch: "main"
            beamline-acronym: "csx"
          # - org: "NSLS2"
          #   repo: "smi-profile-collection"
          #   branch: "main"
          #   beamline-acronym: "smi"
          - org: "NSLS2"
            repo: "tes-profile-collection"
            branch: "main"
            beamline-acronym: "tes"
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    env:
      TZ: America/New_York

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set env vars
        run: |
          export PYTHONVER=$(echo ${{ matrix.python-version }} | sed 's/\.//g')
          echo "PYTHONVER=${PYTHONVER}" >> $GITHUB_ENV

      - name: Set artifacts env vars
        run: |
          outputs="${{ toJson(needs.generate_conda_packd_envs.outputs) }}"

          export ARTIFACTS_DIR="$(echo $outputs | yq .artifacts_dir)"
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}">> $GITHUB_ENV

          export ARTIFACT_FILE_NAME="$(echo $outputs | yq .artifact_py${PYTHONVER})"
          echo "ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME}" >> $GITHUB_ENV

          export CONDA_PACK_ENV_NAME="$(echo $outputs | yq .conda_pack_env_py${PYTHONVER})"
          echo "CONDA_PACK_ENV_NAME=${CONDA_PACK_ENV_NAME}" >> $GITHUB_ENV

          export CONDA_PACK_ENV_CHECKSUM_MD5="$(echo $outputs | yq .checksum_md5_py${PYTHONVER})"
          echo "CONDA_PACK_ENV_CHECKSUM_MD5=${CONDA_PACK_ENV_CHECKSUM_MD5}" >> $GITHUB_ENV

          env | sort -u

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_FILE_NAME }}
          path: ${{ env.ARTIFACTS_DIR }}

      - name: List the directory with downloaded artifacts
        run: |
          ls -la ${ARTIFACTS_DIR}

      - name: Test the env with the beamline integration test action
        uses: NSLS2/gha-beamline-integration-test@2025-1.0-test
        with:
          conda_env_url: ""
          conda_env_md5: "${{ env.CONDA_PACK_ENV_CHECKSUM_MD5 }}"
          conda_pack_env_tarball: "${{ env.ARTIFACTS_DIR }}/${{ env.CONDA_PACK_ENV_NAME }}.tar.gz"
          org: "${{ matrix.repos.org }}"
          repo: "${{ matrix.repos.repo }}"
          branch: "${{ matrix.repos.branch }}"
          beamline-acronym: "${{ matrix.repos.beamline-acronym }}"

  upload_to_zenodo:
    name: Upload to Zenodo
    needs: test_conda_packd_envs
    if: success() && github.event_name == 'release'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Download all artifacts
        id: download
        uses: actions/download-artifact@v4
        with:
          path: "artifacts"

      - name: Flatten artifact directories
        run: |
          echo "Download path: ${{ steps.download.outputs.download-path }}"
          echo "Contents before flattening:"
          ls -la "${{ steps.download.outputs.download-path }}"

          # Find all directories except the download path itself
          for dir in "${{ steps.download.outputs.download-path }}"/*; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              # Move all files to the download path
              find "$dir" -type f -exec mv -v {} "${{ steps.download.outputs.download-path }}/" \;
              # Remove the now empty directory
              rm -rf "$dir"
            fi
          done

          echo "Contents after flattening:"
          ls -la "${{ steps.download.outputs.download-path }}"

          echo "Renaming .yml to .yml.txt"
          for file in "${{ steps.download.outputs.download-path }}"/*.yml; do
            mv "$file" "$file.txt"
          done

          echo "Contents after renaming:"
          ls -la "${{ steps.download.outputs.download-path }}"

      - name: Upload to Zenodo
        run: |
          export ZENODO_TOKEN=${{ secrets.ZENODO_TOKEN }}
          echo "ZENODO_TOKEN=${ZENODO_TOKEN}" >> $GITHUB_ENV
          python3 zenodo_upload.py \
            --conceptrecid "4057062" \
            --version "${{ github.ref_name }}" \
            --artifacts-dir "${{ steps.download.outputs.download-path }}"
